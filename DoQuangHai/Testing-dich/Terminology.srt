1
00:00:00,469 --> 00:00:02,510
REID HOLMES: Có một bộ thuật ngữ đa dạng

2
00:00:02,510 --> 00:00:05,304
liên quan đến vấn đề kiểm thử tư động.

3
00:00:05,304 --> 00:00:07,970
Phần quan trọng nhất mà chúng ta thường đề cập đến

4
00:00:07,970 --> 00:00:09,420
là tình huống kiểm thử riêng biệt ( individual test case).

5
00:00:13,050 --> 00:00:18,616
vậy một Test Case chỉ chỉ ra rõ ràng duy nhất một hành vi trong chương trình.

6
00:00:18,616 --> 00:00:20,490
Nhưng chúng ta thường không chỉ thực thi một Test Case

7
00:00:20,490 --> 00:00:22,536
mà phải thực thi một tập hợp nhiều Test Case

8
00:00:22,536 --> 00:00:23,910
và chúng được gọi là "test suites" (bộ kiểm thử)

9
00:00:28,170 --> 00:00:30,440
Vậy các "bộ" là kiến trúc ở mức độ cao

10
00:00:30,440 --> 00:00:34,501
cho phép ta nhóm nhiều tập hợp các test case liên quan lại với nhau.

11
00:00:34,501 --> 00:00:37,250
Bây giờ, code đang được mỗi test case độc lập đánh giá 

12
00:00:37,250 --> 00:00:40,460
được gọi là "Code Under Test" - hay CUT

13
00:00:40,460 --> 00:00:43,220
Đôi khi điều này cũng được đề cập như

14
00:00:43,220 --> 00:00:44,927
là "System Under Test" - hay SUT.

15
00:00:44,927 --> 00:00:46,760
Vậy "code under test" và "system under test"

16
00:00:46,760 --> 00:00:48,740
đều đại diện cho code mà đang được đánh giá bởi một test case độc lập,

17
00:00:48,740 --> 00:00:54,830
hoặc tập hợp nhiều test case được đóng gói trong một bộ test (*test suite).

18
00:00:54,830 --> 00:00:56,840
Ở mức độ cao, có hai kỹ thuật chính

19
00:00:56,840 --> 00:00:58,760
chúng ta có thể dùng để viết test case.

20
00:00:58,760 --> 00:01:00,505
Thứ nhất là "white box testing"- kiểm thử hộp trắng.

21
00:01:04,982 --> 00:01:06,940
Trong "white box testing", việc chúng ta sẽ làm đó là

22
00:01:06,940 --> 00:01:11,020
kiểm tra đoạn "code under test" và thực sự kiểm tra phần bên trong nó

23
00:01:11,020 --> 00:01:12,910
để thấy cách nó hoạt động.

24
00:01:12,910 --> 00:01:16,510
Bằng cách nhìn vào đoạn code, chúng ta có thể quyết định được những loại test cases

25
00:01:16,510 --> 00:01:18,455
chúng ta muốn tạo ra.

26
00:01:18,455 --> 00:01:21,330
Kỹ thuật còn lại gọi là "black box testing" - kiểm thử hộp trắng

27
00:01:24,837 --> 00:01:27,170
Trong "black box testing", việc chúng ta sẽ làm

28
00:01:27,170 --> 00:01:30,260
là xem những đặc điểm kỹ thuật cho "code under test"

29
00:01:30,260 --> 00:01:31,940
rồi thiết kế các test cases dựa vào đó.

30
00:01:31,940 --> 00:01:34,440
Vậy nên chúng ta không thực sự nhìn xuống các phần được che dấu đi.

31
00:01:34,440 --> 00:01:38,160
Trên thực tế, chúng ta rõ ràng không được nhìn vào các phần được che dấu này.

32
00:01:38,160 --> 00:01:41,180
Bây giờ, chúng ta sẽ thiết kế cả white box và black box test cases.

33
00:01:41,180 --> 00:01:43,970
 chúng ta muốn các test cases đều phải hiệu quả.

34
00:01:43,970 --> 00:01:48,170
Do đó, ta muốn chúng phải phát hiện thật nhanh nhạy những lỗi trong code under test.

35
00:01:48,170 --> 00:01:50,870
Because if we write a test case that can never ever fail
Bởi vì nếu chúng ta viết một test case mà không bao giờ sai

36
00:01:50,870 --> 00:01:53,960
or would never detect a failure in the code under test,
hay không thể phát hiện lỗi trong code under test

37
00:01:53,960 --> 00:01:55,650
it really has no value.
thì nó thực sự chẳng có giá trị gì.

38
00:01:55,650 --> 00:01:57,920
So keeping effectiveness in mind is always important
Vậy hãy ghi nhớ giữ hiệu quả luôn rất quan trọng

39
00:01:57,920 --> 00:01:59,870
when we're designing tests, regardless of
khi ta thiết kế các tests, bất kể

40
00:01:59,870 --> 00:02:03,580
whether they're white box tests or black box tests.
chúng là white box tests hay black box test.

